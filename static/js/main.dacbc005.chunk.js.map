{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","rows","backgroundColor","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","word","lower","charAt","slice","capitalize","msg","defaultProps","aboutText","App","setMode","setAlert","body","message","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.dacbc005.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  // const [title, setTitle] = useState(\"TextUtils - Home\");\r\n  // const changeTitle = ()=>{\r\n  //   if()\r\n  // }\r\n\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\"  aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link\"  to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li> */}\r\n          </ul>\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={props.toggleMode}\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enable DarkMode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set Title Here\",\r\n  aboutText: \"About\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n\r\n\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const handleUpClick = () => {\r\n    // console.log(\"handleUpClick was clicked\");\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to UPPERCASE.\", \"success\");\r\n  };\r\n\r\n\r\n  const handleLoClick = () => {\r\n    // console.log(\"handleUpClick was clicked\");\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to lowercase.\", \"success\");\r\n  };\r\n\r\n\r\n  const handleClearText = () => {\r\n    // console.log(\"handleUpClick was clicked\");\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Textbox is cleared.\", \"success\");\r\n  };\r\n\r\n\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"handle on changed\");\r\n    setText(event.target.value);\r\n  };\r\n\r\n  // Credits: A\r\n  const handleCopy = ()=> {\r\n    \r\n    var text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Text Copied to ClipBoard.\", \"success\");\r\n  }\r\n\r\n  // Credit: codingwala\r\n  const handleExtraSpaces = ()=>{\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra Space removed.\", \"success\");\r\n  }\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\r\n      >\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3 my-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"grey\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"#042743\",\r\n            }}\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>\r\n          Convert To Uppercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>\r\n          Convert To lowercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleClearText}>\r\n          Clear Text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>\r\n          Copy Text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>\r\n          Remove Extra Spaces\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\r\n      >\r\n        <h2 className=\"my-2\">Text Summary</h2>\r\n        <p>\r\n          Words: {text.split(\" \").length}, characters: {text.length}\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} minutes to read</p>\r\n        <h2>Preview Text</h2>\r\n        <p>\r\n          {text.length > 0\r\n            ? text\r\n            : \"Enter Your text in the text box above to preview\"}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>\r\n          {capitalize(props.alert.type)}: {props.alert.msg}\r\n        </strong>\r\n      </div>\r\n    )\r\n  );\r\n}\r\n","// import logo from './logo.svg';\r\nimport \"./App.css\";\r\n// import About from \"./components/About\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport TextForm from \"./components/TextForm\";\r\nimport React, { useState } from \"react\";\r\n// import { BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\r\nimport Alert from \"./components/Alert\";\r\n\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState(\"light\");\r\n  const [alert, setAlert] = useState(null);\r\n\r\n  const toggleMode = () => {\r\n    if (mode === \"light\") {\r\n      setMode(\"dark\");\r\n      document.body.style.backgroundColor = \"#042743\";\r\n      showAlert(\"Dark Mode has been enabled.\", \"success\");\r\n      document.title = \"TextUtils - Dark Mode\";\r\n    } else {\r\n      setMode(\"light\");\r\n      document.body.style.backgroundColor = \"white\";\r\n      showAlert(\"Dark Mode has been disabled.\", \"success\");\r\n      document.title = \"TextUtils - Light Mode\";\r\n    }\r\n  };\r\n\r\n  const showAlert = (message, type) => {\r\n    setAlert({\r\n      msg: message,\r\n      type: type,\r\n    });\r\n    setTimeout(() => {\r\n      setAlert(null);\r\n    }, 1500);\r\n  };\r\n  return (\r\n    <>\r\n       {/* <Router> */}\r\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\r\n        <Alert alert={alert} showAlert={showAlert} />\r\n         {/* <Switch> */}\r\n          {/* <Route exact path=\"/about\"> */}\r\n            {/* <About /> */}\r\n          {/* </Route> */}\r\n\r\n          {/* <Route exact path=\"/\"> */}\r\n            <TextForm\r\n              heading=\"Analyze Your Text Here.\"\r\n              mode={mode}\r\n              toggleMode={toggleMode}\r\n              showAlert={showAlert}\r\n            />\r\n          {/* </Route> */}\r\n        {/* </Switch> */}\r\n      {/* </Router> */}\r\n      </>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}